Plugin:
Plugins possible on:
+ public methods
+ object instantiated by the ObjectManager
+ classes, interfaces, abstract classes, parent classes

IMPLEMENTATION:
declare in DI.xml create method on php class with reference to original class parameters is origin class are subject and parameters on origin method
EX: public function beforeGetById(ProductRepositoryInterface $subject, $productId, $editMode = false, $storeId = null, $forceReload = false)


pseudo code:
public function afterGetById(subject, result)


Plugins impossible on:
+ final methods or final classes
+ protected or private methods
+ static methods
+ __construct
+ object instantiated with new (without ObjectManager)
+ virtual types
+ objects that are instantiated before Magento\Framework\Interception is bootstrapped


===============================
Declarative Schema
php -d memory_limit=-1 bin/magento setup:db-declaration:generate-whitelist --module-name=Mage2tv_BrandExample
php -d memory_limit=-1 bin/magento setup:upgrade --dry-run=1

php -d memory_limit=-1 bin/magento setup:db-declaration:generate-whitelist --module-name=Mage2tv_BrandExample

php -d memory_limit=-1 bin/magento setup:upgrade --dry-run=1

php -d memory_limit=-1 bin/magento setup:upgrade --keep-generated --dry-run=1

php -d memory_limit=-1 bin/magento setup:upgrade --keep-generated

When delete schema database xml
php -d memory_limit=-1 bin/magento setup:upgrade --safe-mode=1

Restore field removed
php -d memory_limit=-1 bin/magento setup:upgrade --data-restore=1 --safe-mode=1

STEP to remove a module with it's DB tables:
1. Deactivate the module in the development environment and run setup:upgrade
2 Commit app/etc/config.php
3. Deploy to intermediate systems like integration or staging (if any) setup:upgrade each time
4. Deploy app/etc/config.php to production
5. Run bin/magento setup:upgrade on production
6. Remove the module source code in development
7. Commit deleting the files
8. Deploy to each system



